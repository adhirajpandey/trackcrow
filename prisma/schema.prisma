generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Transaction {
  uuid           String          @id
  id             Int             @unique @default(autoincrement())
  user_uuid      String
  amount         Decimal
  type           TransactionType @default(UPI)
  recipient      String
  recipient_name String?
  reference      String?
  account        String?
  remarks        String?
  location       String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  categoryId     Int?
  subcategoryId  Int?
  timestamp      DateTime        @db.Timestamptz(6)
  raw_message    String?
  input_mode     InputType
  Category       Category?       @relation(fields: [categoryId], references: [id])
  Subcategory    Subcategory?    @relation(fields: [subcategoryId], references: [id])
  User           User            @relation(fields: [user_uuid], references: [uuid], onDelete: Cascade)

  @@map("transaction")
}

model User {
  uuid         String        @id
  id           Int           @unique @default(autoincrement())
  subscription Int           @default(0)
  email        String        @unique
  name         String
  image        String?
  provider     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  lt_token     String?
  Category     Category[]
  Subcategory  Subcategory[]
  Transaction  Transaction[]

  @@map("user")
}

model Category {
  id          Int           @id @default(autoincrement())
  name        String
  user_uuid   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  User        User          @relation(fields: [user_uuid], references: [uuid], onDelete: Cascade)
  Subcategory Subcategory[]
  Transaction Transaction[]

  @@unique([name, user_uuid])
  @@map("category")
}

model Subcategory {
  id          Int           @id @default(autoincrement())
  name        String
  categoryId  Int
  user_uuid   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Category    Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  User        User          @relation(fields: [user_uuid], references: [uuid])
  Transaction Transaction[]

  @@unique([name, categoryId])
  @@map("subcategory")
}

enum TransactionType {
  UPI
  CARD
  CASH
  NETBANKING
  OTHER
}

enum InputType {
  AUTO
  MANUAL
}
